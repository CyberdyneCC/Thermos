--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -10,70 +10,105 @@
 
 public class RegionFileCache
 {
-    private static final Map regionsByFilename = new HashMap();
-    private static final String __OBFID = "CL_00000383";
+	public static final Map<File,RegionFile> regionsByFilename = new HashMap<File,RegionFile>(); // CraftBukkit - private -> public
+	private static final String __OBFID = "CL_00000383";
 
-    public static synchronized RegionFile createOrLoadRegionFile(File p_76550_0_, int p_76550_1_, int p_76550_2_)
-    {
-        File file2 = new File(p_76550_0_, "region");
-        File file3 = new File(file2, "r." + (p_76550_1_ >> 5) + "." + (p_76550_2_ >> 5) + ".mca");
-        RegionFile regionfile = (RegionFile)regionsByFilename.get(file3);
+	public static synchronized RegionFile createOrLoadRegionFile(File p_76550_0_, int p_76550_1_, int p_76550_2_)
+	{
+		return createOrLoadRegionFile(p_76550_0_,  p_76550_1_,  p_76550_2_, true);
+	}
+	public static synchronized RegionFile createOrLoadRegionFile(File p_76550_0_, int p_76550_1_, int p_76550_2_, boolean create)
+	{
+		File file2 = new File(p_76550_0_, "region");
+		File file3 = new File(file2, "r." + (p_76550_1_ >> 5) + "." + (p_76550_2_ >> 5) + ".mca");
+		RegionFile regionfile = (RegionFile)regionsByFilename.get(file3);
 
-        if (regionfile != null)
-        {
-            return regionfile;
-        }
-        else
-        {
-            if (!file2.exists())
-            {
-                file2.mkdirs();
-            }
+		if (regionfile != null)
+		{
+			return regionfile;
+		}
+		else
+		{
+			if (!create && !file2.exists()) { return null; } // PaperSpigot
+			if (!file2.exists())
+			{
+				file2.mkdirs();
+			}
 
-            if (regionsByFilename.size() >= 256)
-            {
-                clearRegionFileReferences();
-            }
+			if (regionsByFilename.size() >= 256)
+			{
+				deleteOldestReference();
+			}
 
-            RegionFile regionfile1 = new RegionFile(file3);
-            regionsByFilename.put(file3, regionfile1);
-            return regionfile1;
-        }
-    }
+			RegionFile regionfile1 = new RegionFile(file3);
+			regionsByFilename.put(file3, regionfile1);
+			return regionfile1;
+		}
+	}
+	// Thermos a kinda-copy of the method below, except here we delete the oldest stream rather than deleting all filestreams
+	// This is a key part of ensuring that the chunk existence thread can complete its necessary tasks
+	public static synchronized void deleteOldestReference()
+	{
+		long oldest = System.currentTimeMillis();
+		File toJunk = null;
+		for (Map.Entry<File,RegionFile> entry : regionsByFilename.entrySet())
+		{
+			if(entry.getKey().lastModified() < oldest)
+			{
+				oldest = entry.getKey().lastModified();
+				toJunk = entry.getKey();
+			}
+		}
+		if(toJunk != null)
+		{
+			try
+			{
+				regionsByFilename.remove(toJunk).close();
+			}
+			catch(IOException e)
+			{
+				e.printStackTrace();
+			}
+		}
+		else // Default to usual behavior if this fails
+		{
+			clearRegionFileReferences();
+		}
+	}
 
-    public static synchronized void clearRegionFileReferences()
-    {
-        Iterator iterator = regionsByFilename.values().iterator();
+	public static synchronized void clearRegionFileReferences()
+	{
+		Iterator iterator = regionsByFilename.values().iterator();
 
-        while (iterator.hasNext())
-        {
-            RegionFile regionfile = (RegionFile)iterator.next();
+		while (iterator.hasNext())
+		{
+			RegionFile regionfile = (RegionFile)iterator.next();
 
-            try
-            {
-                if (regionfile != null)
-                {
-                    regionfile.close();
-                }
-            }
-            catch (IOException ioexception)
-            {
-                ioexception.printStackTrace();
-            }
-        }
+			try
+			{
+				if (regionfile != null)
+				{
+					regionfile.close();
+				}
+			}
+			catch (IOException ioexception)
+			{
+				ioexception.printStackTrace();
+			}
+		}
 
-        regionsByFilename.clear();
-    }
+		regionsByFilename.clear();
+	}
 
-    public static DataInputStream getChunkInputStream(File p_76549_0_, int p_76549_1_, int p_76549_2_)
-    {
-        RegionFile regionfile = createOrLoadRegionFile(p_76549_0_, p_76549_1_, p_76549_2_);
-        return regionfile.getChunkDataInputStream(p_76549_1_ & 31, p_76549_2_ & 31);
-    }
+	public static DataInputStream getChunkInputStream(File p_76549_0_, int p_76549_1_, int p_76549_2_)
+	{
+		RegionFile regionfile = createOrLoadRegionFile(p_76549_0_, p_76549_1_, p_76549_2_);
+		return regionfile.getChunkDataInputStream(p_76549_1_ & 31, p_76549_2_ & 31);
+	}
 
-    public static DataOutputStream getChunkOutputStream(File p_76552_0_, int p_76552_1_, int p_76552_2_)
-    {
-        RegionFile regionfile = createOrLoadRegionFile(p_76552_0_, p_76552_1_, p_76552_2_);
-        return regionfile.getChunkDataOutputStream(p_76552_1_ & 31, p_76552_2_ & 31);
-    }
+	public static DataOutputStream getChunkOutputStream(File p_76552_0_, int p_76552_1_, int p_76552_2_)
+	{
+		RegionFile regionfile = createOrLoadRegionFile(p_76552_0_, p_76552_1_, p_76552_2_);
+		return regionfile.getChunkDataOutputStream(p_76552_1_ & 31, p_76552_2_ & 31);
+	}
 }
